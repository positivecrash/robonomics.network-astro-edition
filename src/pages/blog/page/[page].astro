---
import Layout from '../../../layouts/BlogLayout.astro';
import PostCard from '../../../components/post/PostCard.astro';
import { getCollection } from 'astro:content';

export async function getStaticPaths() {
  const posts = await getCollection('blog'); // Fetch posts inside getStaticPaths
  const postsPerPage = 12;
  const totalPages = Math.ceil(posts.length / postsPerPage);

  return Array.from({ length: totalPages }, (_, i) => ({
    params: { page: (i + 1).toString() },
    props: { posts, totalPages, postsPerPage }, // Pass posts & totalPages as props
  }));
}

const { posts, totalPages, postsPerPage } = Astro.props; // Get the passed props
const currentPage = parseInt(Astro.params.page || '1', 10);
const paginatedPosts = posts
  .sort((a, b) => new Date(b.data.date) - new Date(a.data.date))
  .slice((currentPage - 1) * postsPerPage, currentPage * postsPerPage);

---

<Layout
  totalPages={totalPages}
  currentPage={currentPage}
>
  {paginatedPosts.length === 0 ? (
    <div class="blog__no-post align-center">
      <blockquote>No posts yet</blockquote>
    </div>
  ) : (
    <section class="layout blog_grid">
      {paginatedPosts.map((post) => (
        post.data.published && <PostCard post={{...post.data, url: post.id}} />)
      )}
    </section>
  )}
</Layout>


<style>
  blockquote {
    border-left: none;
  }

  .blog__no-post .oldy {
    text-align: center;
  }

  .blog__no-post .oldy p {
    margin-bottom: calc(var(--space) * 0.7);
    text-transform: uppercase;
    font-weight: 500;
  }

  .blog__no-post .oldy li {
    font-weight: 300;
    font-style: italic;
  }

  .blog__no-post .oldy li:not(:last-child) {
    margin-bottom: calc(var(--space) * 0.3);
  }

</style> 
